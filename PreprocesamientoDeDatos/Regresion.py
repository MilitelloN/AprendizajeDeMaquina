# -*- coding: utf-8 -*-
"""PreProcesamiento-Regresion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13yVqSElFLrwhxwlbNGPMcXatCoLlsrKP
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Dataset de ejemplo

# Cargar dataset de ejemplo
data = pd.read_csv('/content/studentHabitsPerformanceRegressionDataset.csv')
df = pd.DataFrame(data, columns=data.columns)


# Ver las primeras filas
print("Primeras Filas: ")
print(df.head())

# Ver información general del dataset
print("\n\nInformacion general del dataset")
print(df.info())

# Resumen estadístico
print("\n\nResumen estadistico:")
print(df.describe())

# Identificar tipo de variables
print("\n\nTipo de variables")
print(df.dtypes)

"""Se examinaron las primeras filas del conjunto de datos y se observaron que tipos de variables se almacenan en este dataset, ademas de una breve informacion estadistica sobre cada variable de esta tabla."""

print(df.isnull().sum())

"""Con esta linea de codigo se identifican las columnas que tienen datos faltantes, en este caso, la unica columna que presenta datos nulos es "parental_education_level"
"""

print("Histograma de todas las variables numéricas")
df.hist(bins=30, figsize=(15, 10))
plt.tight_layout()
plt.show()

print("\n\nDiagrama de caja para detectar outliers")
plt.figure(figsize=(15, 8))
sns.boxplot(data=df)
plt.xticks(rotation=90)
plt.title("Diagramas de caja para cada variable")
plt.show()

print("\n\nMapa de calor de correlación sobre columnas numericas")
df_numericas = df.select_dtypes(include=['number']) # Muestra las columnas numericas
plt.figure(figsize=(12, 8))
sns.heatmap(df_numericas.corr(), annot=True, cmap='coolwarm')
plt.title("Matriz de correlación (variables numéricas)")
plt.show()

print("\n\nDiagrama de dispersión entre algunas variables")
#print(df.select_dtypes(include=['number']).columns) # Muestra las columnas numericas
sns.pairplot(df[['social_media_hours', 'netflix_hours', 'attendance_percentage', 'sleep_hours', 'exercise_frequency']])
plt.show()

"""En esta seccion se procedio a mostrar todas las variables numericas de la tabla y relacionarlas con el resto de variables. Debido a que en el rendimiento de un alumno puede afectar muchos factores y ademas de forma simultanea podemos observar como se relacionan cada par de factores en un alumno"""

# Valores faltantes (ya lo verificamos antes)

# Si existieran valores faltantes, puedes usar:
# df.fillna(df.mean(), inplace=True)
# o
# df.dropna(inplace=True)

# Detectar outliers con IQR
def detectar_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = df[(df[column] < lower_bound) | (df[column] > upper_bound)]
    return outliers

# Aplicar a todas las columnas
for col in df.select_dtypes(include=np.number).columns:
    outliers = detectar_outliers(df, col)
    print(f'{col}: {len(outliers)} outliers')

# Eliminar outliers (opcional y depende del caso)
# Por ejemplo: eliminar outliers de 'columnTarget'
columnTarget = "study_hours_per_day"
print("\n\nAntes de limpiar outliners",df.shape)
sns.pairplot(df[[columnTarget]])

outliers_target = detectar_outliers(df, columnTarget)
df_cleaned = df[~df.index.isin(outliers_target.index)]

# Verificar nuevamente
print("Despues de limpiar outliners ",df_cleaned.shape,"\n")
sns.pairplot(df[[columnTarget]])

"""En esta seccion de codigo se procedio a detectar los outliners de cada columna de este dataset, luego se eliminaron unicamente los de la columna 'netflix_hours'"""